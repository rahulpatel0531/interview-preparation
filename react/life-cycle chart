// Summary: Lifecycle Chart

// MOUNTING
// ↓
// constructor()
// ↓
// getDerivedStateFromProps()
// ↓
// render()
// ↓
// componentDidMount()

// UPDATING
// ↓
// getDerivedStateFromProps()
// ↓
// shouldComponentUpdate()
// ↓
// render()
// ↓
// getSnapshotBeforeUpdate()
// ↓
// componentDidUpdate()

// UNMOUNTING
// ↓
// componentWillUnmount()




// ✅ Functional Component Equivalent Using Hooks

| Class Lifecycle        | Hook Equivalent                               |
| ---------------------- | --------------------------------------------- |
| `componentDidMount`    | `useEffect(() => {...}, [])`                  |
| `componentDidUpdate`   | `useEffect(() => {...}, [deps])`              |
| `componentWillUnmount` | `useEffect(() => { return () => {...} }, [])` |



import React, { useEffect, useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    console.log("Mounted or Updated");

    return () => {
      console.log("Cleanup on Unmount");
    };
  }, [count]);

  return <button onClick={() => setCount(count + 1)}>Count: {count}</button>;
}
